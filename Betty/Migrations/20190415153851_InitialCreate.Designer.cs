// <auto-generated />
using System;
using Betty.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Betty.Migrations
{
    [DbContext(typeof(BettyDB))]
    [Migration("20190415153851_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854");

            modelBuilder.Entity("Betty.Database.Application", b =>
                {
                    b.Property<ulong>("DiscordServerId");

                    b.Property<ulong>("Channel");

                    b.Property<DateTime?>("Deadline");

                    b.Property<string>("Invite")
                        .IsRequired();

                    b.HasKey("DiscordServerId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Betty.Database.Appointment", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Repetition")
                        .IsRequired();

                    b.Property<string>("Timezone")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Betty.Database.AppointmentNotification", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<ulong>("AppointmentId");

                    b.Property<TimeSpan>("Offset");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("AppointmentNotifications");
                });

            modelBuilder.Entity("Betty.Database.DiscordAppointment", b =>
                {
                    b.Property<ulong>("DiscordServerId");

                    b.Property<ulong>("AppointmentId");

                    b.Property<ulong?>("NotificationChannel");

                    b.HasKey("DiscordServerId", "AppointmentId");

                    b.HasIndex("AppointmentId");

                    b.ToTable("DiscordAppointments");
                });

            modelBuilder.Entity("Betty.Database.DiscordServer", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<ulong?>("ClockChannel");

                    b.Property<string>("Language")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<ulong?>("NotificationChannel");

                    b.Property<ulong?>("PublicChannel");

                    b.HasKey("Id");

                    b.ToTable("DiscordServers");
                });

            modelBuilder.Entity("Betty.Database.Permission", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<ulong>("DiscordServerId");

                    b.Property<int>("Level");

                    b.Property<ulong>("Target");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DiscordServerId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Betty.Database.Application", b =>
                {
                    b.HasOne("Betty.Database.DiscordServer", "DiscordServer")
                        .WithOne("Application")
                        .HasForeignKey("Betty.Database.Application", "DiscordServerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Betty.Database.AppointmentNotification", b =>
                {
                    b.HasOne("Betty.Database.Appointment", "Appointment")
                        .WithMany("Notifications")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Betty.Database.DiscordAppointment", b =>
                {
                    b.HasOne("Betty.Database.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Betty.Database.DiscordServer", "DiscordServer")
                        .WithMany("DiscordAppointments")
                        .HasForeignKey("DiscordServerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Betty.Database.Permission", b =>
                {
                    b.HasOne("Betty.Database.DiscordServer", "DiscordServer")
                        .WithMany("Permissions")
                        .HasForeignKey("DiscordServerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
